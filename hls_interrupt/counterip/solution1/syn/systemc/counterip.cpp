// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "counterip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic counterip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic counterip::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> counterip::ap_ST_fsm_state1 = "1";
const sc_lv<3> counterip::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> counterip::ap_ST_fsm_state5 = "100";
const sc_lv<32> counterip::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool counterip::ap_const_boolean_1 = true;
const sc_lv<1> counterip::ap_const_lv1_0 = "0";
const sc_lv<1> counterip::ap_const_lv1_1 = "1";
const sc_lv<2> counterip::ap_const_lv2_0 = "00";
const sc_lv<2> counterip::ap_const_lv2_2 = "10";
const sc_lv<2> counterip::ap_const_lv2_3 = "11";
const sc_lv<2> counterip::ap_const_lv2_1 = "1";
const sc_lv<32> counterip::ap_const_lv32_1 = "1";
const bool counterip::ap_const_boolean_0 = false;
const int counterip::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<4> counterip::ap_const_lv4_F = "1111";
const sc_lv<4> counterip::ap_const_lv4_0 = "0000";
const sc_lv<34> counterip::ap_const_lv34_3FFFFFFFF = "1111111111111111111111111111111111";
const sc_lv<32> counterip::ap_const_lv32_2 = "10";

counterip::counterip(sc_module_name name) : sc_module(name), mVcdFile(0) {
    counterip_config_s_axi_U = new counterip_config_s_axi<C_S_AXI_CONFIG_ADDR_WIDTH,C_S_AXI_CONFIG_DATA_WIDTH>("counterip_config_s_axi_U");
    counterip_config_s_axi_U->AWVALID(s_axi_config_AWVALID);
    counterip_config_s_axi_U->AWREADY(s_axi_config_AWREADY);
    counterip_config_s_axi_U->AWADDR(s_axi_config_AWADDR);
    counterip_config_s_axi_U->WVALID(s_axi_config_WVALID);
    counterip_config_s_axi_U->WREADY(s_axi_config_WREADY);
    counterip_config_s_axi_U->WDATA(s_axi_config_WDATA);
    counterip_config_s_axi_U->WSTRB(s_axi_config_WSTRB);
    counterip_config_s_axi_U->ARVALID(s_axi_config_ARVALID);
    counterip_config_s_axi_U->ARREADY(s_axi_config_ARREADY);
    counterip_config_s_axi_U->ARADDR(s_axi_config_ARADDR);
    counterip_config_s_axi_U->RVALID(s_axi_config_RVALID);
    counterip_config_s_axi_U->RREADY(s_axi_config_RREADY);
    counterip_config_s_axi_U->RDATA(s_axi_config_RDATA);
    counterip_config_s_axi_U->RRESP(s_axi_config_RRESP);
    counterip_config_s_axi_U->BVALID(s_axi_config_BVALID);
    counterip_config_s_axi_U->BREADY(s_axi_config_BREADY);
    counterip_config_s_axi_U->BRESP(s_axi_config_BRESP);
    counterip_config_s_axi_U->ACLK(ap_clk);
    counterip_config_s_axi_U->ARESET(ap_rst_n_inv);
    counterip_config_s_axi_U->ACLK_EN(ap_var_for_const0);
    counterip_config_s_axi_U->ap_start(ap_start);
    counterip_config_s_axi_U->interrupt(interrupt);
    counterip_config_s_axi_U->ap_ready(ap_ready);
    counterip_config_s_axi_U->ap_done(ap_done);
    counterip_config_s_axi_U->ap_idle(ap_idle);
    counterip_config_s_axi_U->beats(beats);
    counterip_config_s_axi_U->start_V(start_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( tmp_3_reg_170 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_tmp_3_reg_170 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( data_out_keep_V_1_ack_in );
    sensitive << ( data_out_strb_V_1_ack_in );
    sensitive << ( data_out_user_V_1_ack_in );
    sensitive << ( data_out_last_V_1_ack_in );
    sensitive << ( data_out_id_V_1_ack_in );
    sensitive << ( data_out_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_3_fu_139_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( data_out_keep_V_1_ack_in );
    sensitive << ( data_out_strb_V_1_ack_in );
    sensitive << ( data_out_user_V_1_ack_in );
    sensitive << ( data_out_last_V_1_ack_in );
    sensitive << ( data_out_id_V_1_ack_in );
    sensitive << ( data_out_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_val_assign_phi_fu_108_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( val_assign_reg_104 );
    sensitive << ( i_reg_179 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( data_out_keep_V_1_ack_in );
    sensitive << ( data_out_strb_V_1_ack_in );
    sensitive << ( data_out_user_V_1_ack_in );
    sensitive << ( data_out_last_V_1_ack_in );
    sensitive << ( data_out_id_V_1_ack_in );
    sensitive << ( data_out_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_out_TDATA);
    sensitive << ( data_out_data_V_1_data_out );

    SC_METHOD(thread_data_out_TDATA_blk_n);
    sensitive << ( data_out_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_3_reg_170 );

    SC_METHOD(thread_data_out_TDEST);
    sensitive << ( data_out_dest_V_1_data_out );

    SC_METHOD(thread_data_out_TID);
    sensitive << ( data_out_id_V_1_data_out );

    SC_METHOD(thread_data_out_TKEEP);
    sensitive << ( data_out_keep_V_1_data_out );

    SC_METHOD(thread_data_out_TLAST);
    sensitive << ( data_out_last_V_1_data_out );

    SC_METHOD(thread_data_out_TSTRB);
    sensitive << ( data_out_strb_V_1_data_out );

    SC_METHOD(thread_data_out_TUSER);
    sensitive << ( data_out_user_V_1_data_out );

    SC_METHOD(thread_data_out_TVALID);
    sensitive << ( data_out_dest_V_1_state );

    SC_METHOD(thread_data_out_data_V_1_ack_in);
    sensitive << ( data_out_data_V_1_state );

    SC_METHOD(thread_data_out_data_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_data_V_1_data_out);
    sensitive << ( data_out_data_V_1_payload_A );
    sensitive << ( data_out_data_V_1_payload_B );
    sensitive << ( data_out_data_V_1_sel );

    SC_METHOD(thread_data_out_data_V_1_load_A);
    sensitive << ( data_out_data_V_1_sel_wr );
    sensitive << ( data_out_data_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_data_V_1_load_B);
    sensitive << ( data_out_data_V_1_sel_wr );
    sensitive << ( data_out_data_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_data_V_1_sel);
    sensitive << ( data_out_data_V_1_sel_rd );

    SC_METHOD(thread_data_out_data_V_1_state_cmp_full);
    sensitive << ( data_out_data_V_1_state );

    SC_METHOD(thread_data_out_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_data_V_1_vld_out);
    sensitive << ( data_out_data_V_1_state );

    SC_METHOD(thread_data_out_dest_V_1_ack_in);
    sensitive << ( data_out_dest_V_1_state );

    SC_METHOD(thread_data_out_dest_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_dest_V_1_data_out);
    sensitive << ( data_out_dest_V_1_sel );

    SC_METHOD(thread_data_out_dest_V_1_sel);
    sensitive << ( data_out_dest_V_1_sel_rd );

    SC_METHOD(thread_data_out_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_dest_V_1_vld_out);
    sensitive << ( data_out_dest_V_1_state );

    SC_METHOD(thread_data_out_id_V_1_ack_in);
    sensitive << ( data_out_id_V_1_state );

    SC_METHOD(thread_data_out_id_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_id_V_1_data_out);
    sensitive << ( data_out_id_V_1_sel );

    SC_METHOD(thread_data_out_id_V_1_sel);
    sensitive << ( data_out_id_V_1_sel_rd );

    SC_METHOD(thread_data_out_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_id_V_1_vld_out);
    sensitive << ( data_out_id_V_1_state );

    SC_METHOD(thread_data_out_keep_V_1_ack_in);
    sensitive << ( data_out_keep_V_1_state );

    SC_METHOD(thread_data_out_keep_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_keep_V_1_data_out);
    sensitive << ( data_out_keep_V_1_sel );

    SC_METHOD(thread_data_out_keep_V_1_sel);
    sensitive << ( data_out_keep_V_1_sel_rd );

    SC_METHOD(thread_data_out_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_keep_V_1_vld_out);
    sensitive << ( data_out_keep_V_1_state );

    SC_METHOD(thread_data_out_last_V_1_ack_in);
    sensitive << ( data_out_last_V_1_state );

    SC_METHOD(thread_data_out_last_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_last_V_1_data_out);
    sensitive << ( data_out_last_V_1_payload_A );
    sensitive << ( data_out_last_V_1_payload_B );
    sensitive << ( data_out_last_V_1_sel );

    SC_METHOD(thread_data_out_last_V_1_load_A);
    sensitive << ( data_out_last_V_1_sel_wr );
    sensitive << ( data_out_last_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_last_V_1_load_B);
    sensitive << ( data_out_last_V_1_sel_wr );
    sensitive << ( data_out_last_V_1_state_cmp_full );

    SC_METHOD(thread_data_out_last_V_1_sel);
    sensitive << ( data_out_last_V_1_sel_rd );

    SC_METHOD(thread_data_out_last_V_1_state_cmp_full);
    sensitive << ( data_out_last_V_1_state );

    SC_METHOD(thread_data_out_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_last_V_1_vld_out);
    sensitive << ( data_out_last_V_1_state );

    SC_METHOD(thread_data_out_strb_V_1_ack_in);
    sensitive << ( data_out_strb_V_1_state );

    SC_METHOD(thread_data_out_strb_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_strb_V_1_data_out);
    sensitive << ( data_out_strb_V_1_sel );

    SC_METHOD(thread_data_out_strb_V_1_sel);
    sensitive << ( data_out_strb_V_1_sel_rd );

    SC_METHOD(thread_data_out_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_strb_V_1_vld_out);
    sensitive << ( data_out_strb_V_1_state );

    SC_METHOD(thread_data_out_user_V_1_ack_in);
    sensitive << ( data_out_user_V_1_state );

    SC_METHOD(thread_data_out_user_V_1_ack_out);
    sensitive << ( data_out_TREADY );

    SC_METHOD(thread_data_out_user_V_1_data_out);
    sensitive << ( data_out_user_V_1_sel );

    SC_METHOD(thread_data_out_user_V_1_sel);
    sensitive << ( data_out_user_V_1_sel_rd );

    SC_METHOD(thread_data_out_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_170 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_out_user_V_1_vld_out);
    sensitive << ( data_out_user_V_1_state );

    SC_METHOD(thread_i_fu_149_p2);
    sensitive << ( ap_phi_mux_val_assign_phi_fu_108_p4 );

    SC_METHOD(thread_lhs_V_fu_119_p1);
    sensitive << ( start_V );

    SC_METHOD(thread_r_V_1_fu_129_p2);
    sensitive << ( r_V_fu_123_p2 );

    SC_METHOD(thread_r_V_fu_123_p2);
    sensitive << ( lhs_V_fu_119_p1 );
    sensitive << ( rhs_V_fu_115_p1 );

    SC_METHOD(thread_rhs_V_fu_115_p1);
    sensitive << ( beats );

    SC_METHOD(thread_tmp_1_cast_fu_135_p1);
    sensitive << ( ap_phi_mux_val_assign_phi_fu_108_p4 );

    SC_METHOD(thread_tmp_3_fu_139_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_V_reg_160 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_cast_fu_135_p1 );

    SC_METHOD(thread_val_assign_1_fu_144_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_V_1_reg_165 );
    sensitive << ( tmp_3_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_cast_fu_135_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_out_data_V_1_ack_in );
    sensitive << ( data_out_keep_V_1_ack_in );
    sensitive << ( data_out_strb_V_1_ack_in );
    sensitive << ( data_out_user_V_1_ack_in );
    sensitive << ( data_out_last_V_1_ack_in );
    sensitive << ( data_out_id_V_1_ack_in );
    sensitive << ( data_out_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_3_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    data_out_data_V_1_sel_rd = SC_LOGIC_0;
    data_out_data_V_1_sel_wr = SC_LOGIC_0;
    data_out_data_V_1_state = "00";
    data_out_keep_V_1_sel_rd = SC_LOGIC_0;
    data_out_keep_V_1_state = "00";
    data_out_strb_V_1_sel_rd = SC_LOGIC_0;
    data_out_strb_V_1_state = "00";
    data_out_user_V_1_sel_rd = SC_LOGIC_0;
    data_out_user_V_1_state = "00";
    data_out_last_V_1_sel_rd = SC_LOGIC_0;
    data_out_last_V_1_sel_wr = SC_LOGIC_0;
    data_out_last_V_1_state = "00";
    data_out_id_V_1_sel_rd = SC_LOGIC_0;
    data_out_id_V_1_state = "00";
    data_out_dest_V_1_sel_rd = SC_LOGIC_0;
    data_out_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "counterip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, data_out_TDATA, "(port)data_out_TDATA");
    sc_trace(mVcdFile, data_out_TVALID, "(port)data_out_TVALID");
    sc_trace(mVcdFile, data_out_TREADY, "(port)data_out_TREADY");
    sc_trace(mVcdFile, data_out_TKEEP, "(port)data_out_TKEEP");
    sc_trace(mVcdFile, data_out_TSTRB, "(port)data_out_TSTRB");
    sc_trace(mVcdFile, data_out_TUSER, "(port)data_out_TUSER");
    sc_trace(mVcdFile, data_out_TLAST, "(port)data_out_TLAST");
    sc_trace(mVcdFile, data_out_TID, "(port)data_out_TID");
    sc_trace(mVcdFile, data_out_TDEST, "(port)data_out_TDEST");
    sc_trace(mVcdFile, s_axi_config_AWVALID, "(port)s_axi_config_AWVALID");
    sc_trace(mVcdFile, s_axi_config_AWREADY, "(port)s_axi_config_AWREADY");
    sc_trace(mVcdFile, s_axi_config_AWADDR, "(port)s_axi_config_AWADDR");
    sc_trace(mVcdFile, s_axi_config_WVALID, "(port)s_axi_config_WVALID");
    sc_trace(mVcdFile, s_axi_config_WREADY, "(port)s_axi_config_WREADY");
    sc_trace(mVcdFile, s_axi_config_WDATA, "(port)s_axi_config_WDATA");
    sc_trace(mVcdFile, s_axi_config_WSTRB, "(port)s_axi_config_WSTRB");
    sc_trace(mVcdFile, s_axi_config_ARVALID, "(port)s_axi_config_ARVALID");
    sc_trace(mVcdFile, s_axi_config_ARREADY, "(port)s_axi_config_ARREADY");
    sc_trace(mVcdFile, s_axi_config_ARADDR, "(port)s_axi_config_ARADDR");
    sc_trace(mVcdFile, s_axi_config_RVALID, "(port)s_axi_config_RVALID");
    sc_trace(mVcdFile, s_axi_config_RREADY, "(port)s_axi_config_RREADY");
    sc_trace(mVcdFile, s_axi_config_RDATA, "(port)s_axi_config_RDATA");
    sc_trace(mVcdFile, s_axi_config_RRESP, "(port)s_axi_config_RRESP");
    sc_trace(mVcdFile, s_axi_config_BVALID, "(port)s_axi_config_BVALID");
    sc_trace(mVcdFile, s_axi_config_BREADY, "(port)s_axi_config_BREADY");
    sc_trace(mVcdFile, s_axi_config_BRESP, "(port)s_axi_config_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_out_data_V_1_data_out, "data_out_data_V_1_data_out");
    sc_trace(mVcdFile, data_out_data_V_1_vld_in, "data_out_data_V_1_vld_in");
    sc_trace(mVcdFile, data_out_data_V_1_vld_out, "data_out_data_V_1_vld_out");
    sc_trace(mVcdFile, data_out_data_V_1_ack_in, "data_out_data_V_1_ack_in");
    sc_trace(mVcdFile, data_out_data_V_1_ack_out, "data_out_data_V_1_ack_out");
    sc_trace(mVcdFile, data_out_data_V_1_payload_A, "data_out_data_V_1_payload_A");
    sc_trace(mVcdFile, data_out_data_V_1_payload_B, "data_out_data_V_1_payload_B");
    sc_trace(mVcdFile, data_out_data_V_1_sel_rd, "data_out_data_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_data_V_1_sel_wr, "data_out_data_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_data_V_1_sel, "data_out_data_V_1_sel");
    sc_trace(mVcdFile, data_out_data_V_1_load_A, "data_out_data_V_1_load_A");
    sc_trace(mVcdFile, data_out_data_V_1_load_B, "data_out_data_V_1_load_B");
    sc_trace(mVcdFile, data_out_data_V_1_state, "data_out_data_V_1_state");
    sc_trace(mVcdFile, data_out_data_V_1_state_cmp_full, "data_out_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_out_keep_V_1_data_out, "data_out_keep_V_1_data_out");
    sc_trace(mVcdFile, data_out_keep_V_1_vld_in, "data_out_keep_V_1_vld_in");
    sc_trace(mVcdFile, data_out_keep_V_1_vld_out, "data_out_keep_V_1_vld_out");
    sc_trace(mVcdFile, data_out_keep_V_1_ack_in, "data_out_keep_V_1_ack_in");
    sc_trace(mVcdFile, data_out_keep_V_1_ack_out, "data_out_keep_V_1_ack_out");
    sc_trace(mVcdFile, data_out_keep_V_1_sel_rd, "data_out_keep_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_keep_V_1_sel, "data_out_keep_V_1_sel");
    sc_trace(mVcdFile, data_out_keep_V_1_state, "data_out_keep_V_1_state");
    sc_trace(mVcdFile, data_out_strb_V_1_data_out, "data_out_strb_V_1_data_out");
    sc_trace(mVcdFile, data_out_strb_V_1_vld_in, "data_out_strb_V_1_vld_in");
    sc_trace(mVcdFile, data_out_strb_V_1_vld_out, "data_out_strb_V_1_vld_out");
    sc_trace(mVcdFile, data_out_strb_V_1_ack_in, "data_out_strb_V_1_ack_in");
    sc_trace(mVcdFile, data_out_strb_V_1_ack_out, "data_out_strb_V_1_ack_out");
    sc_trace(mVcdFile, data_out_strb_V_1_sel_rd, "data_out_strb_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_strb_V_1_sel, "data_out_strb_V_1_sel");
    sc_trace(mVcdFile, data_out_strb_V_1_state, "data_out_strb_V_1_state");
    sc_trace(mVcdFile, data_out_user_V_1_data_out, "data_out_user_V_1_data_out");
    sc_trace(mVcdFile, data_out_user_V_1_vld_in, "data_out_user_V_1_vld_in");
    sc_trace(mVcdFile, data_out_user_V_1_vld_out, "data_out_user_V_1_vld_out");
    sc_trace(mVcdFile, data_out_user_V_1_ack_in, "data_out_user_V_1_ack_in");
    sc_trace(mVcdFile, data_out_user_V_1_ack_out, "data_out_user_V_1_ack_out");
    sc_trace(mVcdFile, data_out_user_V_1_sel_rd, "data_out_user_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_user_V_1_sel, "data_out_user_V_1_sel");
    sc_trace(mVcdFile, data_out_user_V_1_state, "data_out_user_V_1_state");
    sc_trace(mVcdFile, data_out_last_V_1_data_out, "data_out_last_V_1_data_out");
    sc_trace(mVcdFile, data_out_last_V_1_vld_in, "data_out_last_V_1_vld_in");
    sc_trace(mVcdFile, data_out_last_V_1_vld_out, "data_out_last_V_1_vld_out");
    sc_trace(mVcdFile, data_out_last_V_1_ack_in, "data_out_last_V_1_ack_in");
    sc_trace(mVcdFile, data_out_last_V_1_ack_out, "data_out_last_V_1_ack_out");
    sc_trace(mVcdFile, data_out_last_V_1_payload_A, "data_out_last_V_1_payload_A");
    sc_trace(mVcdFile, data_out_last_V_1_payload_B, "data_out_last_V_1_payload_B");
    sc_trace(mVcdFile, data_out_last_V_1_sel_rd, "data_out_last_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_last_V_1_sel_wr, "data_out_last_V_1_sel_wr");
    sc_trace(mVcdFile, data_out_last_V_1_sel, "data_out_last_V_1_sel");
    sc_trace(mVcdFile, data_out_last_V_1_load_A, "data_out_last_V_1_load_A");
    sc_trace(mVcdFile, data_out_last_V_1_load_B, "data_out_last_V_1_load_B");
    sc_trace(mVcdFile, data_out_last_V_1_state, "data_out_last_V_1_state");
    sc_trace(mVcdFile, data_out_last_V_1_state_cmp_full, "data_out_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, data_out_id_V_1_data_out, "data_out_id_V_1_data_out");
    sc_trace(mVcdFile, data_out_id_V_1_vld_in, "data_out_id_V_1_vld_in");
    sc_trace(mVcdFile, data_out_id_V_1_vld_out, "data_out_id_V_1_vld_out");
    sc_trace(mVcdFile, data_out_id_V_1_ack_in, "data_out_id_V_1_ack_in");
    sc_trace(mVcdFile, data_out_id_V_1_ack_out, "data_out_id_V_1_ack_out");
    sc_trace(mVcdFile, data_out_id_V_1_sel_rd, "data_out_id_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_id_V_1_sel, "data_out_id_V_1_sel");
    sc_trace(mVcdFile, data_out_id_V_1_state, "data_out_id_V_1_state");
    sc_trace(mVcdFile, data_out_dest_V_1_data_out, "data_out_dest_V_1_data_out");
    sc_trace(mVcdFile, data_out_dest_V_1_vld_in, "data_out_dest_V_1_vld_in");
    sc_trace(mVcdFile, data_out_dest_V_1_vld_out, "data_out_dest_V_1_vld_out");
    sc_trace(mVcdFile, data_out_dest_V_1_ack_in, "data_out_dest_V_1_ack_in");
    sc_trace(mVcdFile, data_out_dest_V_1_ack_out, "data_out_dest_V_1_ack_out");
    sc_trace(mVcdFile, data_out_dest_V_1_sel_rd, "data_out_dest_V_1_sel_rd");
    sc_trace(mVcdFile, data_out_dest_V_1_sel, "data_out_dest_V_1_sel");
    sc_trace(mVcdFile, data_out_dest_V_1_state, "data_out_dest_V_1_state");
    sc_trace(mVcdFile, beats, "beats");
    sc_trace(mVcdFile, start_V, "start_V");
    sc_trace(mVcdFile, data_out_TDATA_blk_n, "data_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_3_reg_170, "tmp_3_reg_170");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_3_reg_170, "ap_reg_pp0_iter1_tmp_3_reg_170");
    sc_trace(mVcdFile, val_assign_reg_104, "val_assign_reg_104");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, r_V_fu_123_p2, "r_V_fu_123_p2");
    sc_trace(mVcdFile, r_V_reg_160, "r_V_reg_160");
    sc_trace(mVcdFile, r_V_1_fu_129_p2, "r_V_1_fu_129_p2");
    sc_trace(mVcdFile, r_V_1_reg_165, "r_V_1_reg_165");
    sc_trace(mVcdFile, tmp_3_fu_139_p2, "tmp_3_fu_139_p2");
    sc_trace(mVcdFile, val_assign_1_fu_144_p2, "val_assign_1_fu_144_p2");
    sc_trace(mVcdFile, val_assign_1_reg_174, "val_assign_1_reg_174");
    sc_trace(mVcdFile, i_fu_149_p2, "i_fu_149_p2");
    sc_trace(mVcdFile, i_reg_179, "i_reg_179");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_val_assign_phi_fu_108_p4, "ap_phi_mux_val_assign_phi_fu_108_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, lhs_V_fu_119_p1, "lhs_V_fu_119_p1");
    sc_trace(mVcdFile, rhs_V_fu_115_p1, "rhs_V_fu_115_p1");
    sc_trace(mVcdFile, tmp_1_cast_fu_135_p1, "tmp_1_cast_fu_135_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("counterip.hdltvin.dat");
    mHdltvoutHandle.open("counterip.hdltvout.dat");
}

counterip::~counterip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete counterip_config_s_axi_U;
}

void counterip::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void counterip::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_vld_out.read()))) {
            data_out_data_V_1_sel_rd =  (sc_logic) (~data_out_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_ack_in.read()))) {
            data_out_data_V_1_sel_wr =  (sc_logic) (~data_out_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_2)))) {
            data_out_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_1)))) {
            data_out_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(data_out_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_ack_out.read()))))) {
            data_out_data_V_1_state = ap_const_lv2_3;
        } else {
            data_out_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_vld_out.read()))) {
            data_out_dest_V_1_sel_rd =  (sc_logic) (~data_out_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_dest_V_1_state.read())))) {
            data_out_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_dest_V_1_state.read())))) {
            data_out_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_dest_V_1_ack_out.read()))))) {
            data_out_dest_V_1_state = ap_const_lv2_3;
        } else {
            data_out_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_vld_out.read()))) {
            data_out_id_V_1_sel_rd =  (sc_logic) (~data_out_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_id_V_1_state.read())))) {
            data_out_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_id_V_1_state.read())))) {
            data_out_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_id_V_1_ack_out.read()))))) {
            data_out_id_V_1_state = ap_const_lv2_3;
        } else {
            data_out_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_vld_out.read()))) {
            data_out_keep_V_1_sel_rd =  (sc_logic) (~data_out_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_keep_V_1_state.read())))) {
            data_out_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_keep_V_1_state.read())))) {
            data_out_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_keep_V_1_ack_out.read()))))) {
            data_out_keep_V_1_state = ap_const_lv2_3;
        } else {
            data_out_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_vld_out.read()))) {
            data_out_last_V_1_sel_rd =  (sc_logic) (~data_out_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_ack_in.read()))) {
            data_out_last_V_1_sel_wr =  (sc_logic) (~data_out_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_last_V_1_state.read())))) {
            data_out_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_last_V_1_state.read())))) {
            data_out_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_ack_out.read()))))) {
            data_out_last_V_1_state = ap_const_lv2_3;
        } else {
            data_out_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_vld_out.read()))) {
            data_out_strb_V_1_sel_rd =  (sc_logic) (~data_out_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_strb_V_1_state.read())))) {
            data_out_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_strb_V_1_state.read())))) {
            data_out_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_strb_V_1_ack_out.read()))))) {
            data_out_strb_V_1_state = ap_const_lv2_3;
        } else {
            data_out_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_vld_out.read()))) {
            data_out_user_V_1_sel_rd =  (sc_logic) (~data_out_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_out_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, data_out_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, data_out_user_V_1_state.read())))) {
            data_out_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, data_out_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_user_V_1_state.read())))) {
            data_out_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, data_out_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, data_out_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, data_out_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, data_out_user_V_1_ack_out.read()))))) {
            data_out_user_V_1_state = ap_const_lv2_3;
        } else {
            data_out_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        val_assign_reg_104 = i_reg_179.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        val_assign_reg_104 = start_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_3_reg_170 = tmp_3_reg_170.read();
        tmp_3_reg_170 = tmp_3_fu_139_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_load_A.read())) {
        data_out_data_V_1_payload_A = val_assign_reg_104.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_load_B.read())) {
        data_out_data_V_1_payload_B = val_assign_reg_104.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_load_A.read())) {
        data_out_last_V_1_payload_A = val_assign_1_reg_174.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_load_B.read())) {
        data_out_last_V_1_payload_B = val_assign_1_reg_174.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_139_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_179 = i_fu_149_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_V_1_reg_165 = r_V_1_fu_129_p2.read();
        r_V_reg_160 = r_V_fu_123_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_139_p2.read()))) {
        val_assign_1_reg_174 = val_assign_1_fu_144_p2.read();
    }
}

void counterip::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void counterip::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void counterip::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void counterip::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void counterip::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void counterip::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void counterip::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void counterip::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void counterip::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()));
}

void counterip::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void counterip::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_3_reg_170.read()) && esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()));
}

void counterip::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void counterip::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_in.read()));
}

void counterip::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_139_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void counterip::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void counterip::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void counterip::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void counterip::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void counterip::thread_ap_phi_mux_val_assign_phi_fu_108_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()))) {
        ap_phi_mux_val_assign_phi_fu_108_p4 = i_reg_179.read();
    } else {
        ap_phi_mux_val_assign_phi_fu_108_p4 = val_assign_reg_104.read();
    }
}

void counterip::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void counterip::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void counterip::thread_data_out_TDATA() {
    data_out_TDATA = data_out_data_V_1_data_out.read();
}

void counterip::thread_data_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_3_reg_170.read())))) {
        data_out_TDATA_blk_n = data_out_data_V_1_state.read()[1];
    } else {
        data_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void counterip::thread_data_out_TDEST() {
    data_out_TDEST = data_out_dest_V_1_data_out.read();
}

void counterip::thread_data_out_TID() {
    data_out_TID = data_out_id_V_1_data_out.read();
}

void counterip::thread_data_out_TKEEP() {
    data_out_TKEEP = data_out_keep_V_1_data_out.read();
}

void counterip::thread_data_out_TLAST() {
    data_out_TLAST = data_out_last_V_1_data_out.read();
}

void counterip::thread_data_out_TSTRB() {
    data_out_TSTRB = data_out_strb_V_1_data_out.read();
}

void counterip::thread_data_out_TUSER() {
    data_out_TUSER = data_out_user_V_1_data_out.read();
}

void counterip::thread_data_out_TVALID() {
    data_out_TVALID = data_out_dest_V_1_state.read()[0];
}

void counterip::thread_data_out_data_V_1_ack_in() {
    data_out_data_V_1_ack_in = data_out_data_V_1_state.read()[1];
}

void counterip::thread_data_out_data_V_1_ack_out() {
    data_out_data_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_data_V_1_sel.read())) {
        data_out_data_V_1_data_out = data_out_data_V_1_payload_B.read();
    } else {
        data_out_data_V_1_data_out = data_out_data_V_1_payload_A.read();
    }
}

void counterip::thread_data_out_data_V_1_load_A() {
    data_out_data_V_1_load_A = (data_out_data_V_1_state_cmp_full.read() & ~data_out_data_V_1_sel_wr.read());
}

void counterip::thread_data_out_data_V_1_load_B() {
    data_out_data_V_1_load_B = (data_out_data_V_1_sel_wr.read() & data_out_data_V_1_state_cmp_full.read());
}

void counterip::thread_data_out_data_V_1_sel() {
    data_out_data_V_1_sel = data_out_data_V_1_sel_rd.read();
}

void counterip::thread_data_out_data_V_1_state_cmp_full() {
    data_out_data_V_1_state_cmp_full =  (sc_logic) ((!data_out_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void counterip::thread_data_out_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_data_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_data_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_data_V_1_vld_out() {
    data_out_data_V_1_vld_out = data_out_data_V_1_state.read()[0];
}

void counterip::thread_data_out_dest_V_1_ack_in() {
    data_out_dest_V_1_ack_in = data_out_dest_V_1_state.read()[1];
}

void counterip::thread_data_out_dest_V_1_ack_out() {
    data_out_dest_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_dest_V_1_data_out() {
    data_out_dest_V_1_data_out = ap_const_lv1_0;
}

void counterip::thread_data_out_dest_V_1_sel() {
    data_out_dest_V_1_sel = data_out_dest_V_1_sel_rd.read();
}

void counterip::thread_data_out_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_dest_V_1_vld_out() {
    data_out_dest_V_1_vld_out = data_out_dest_V_1_state.read()[0];
}

void counterip::thread_data_out_id_V_1_ack_in() {
    data_out_id_V_1_ack_in = data_out_id_V_1_state.read()[1];
}

void counterip::thread_data_out_id_V_1_ack_out() {
    data_out_id_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_id_V_1_data_out() {
    data_out_id_V_1_data_out = ap_const_lv1_0;
}

void counterip::thread_data_out_id_V_1_sel() {
    data_out_id_V_1_sel = data_out_id_V_1_sel_rd.read();
}

void counterip::thread_data_out_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_id_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_id_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_id_V_1_vld_out() {
    data_out_id_V_1_vld_out = data_out_id_V_1_state.read()[0];
}

void counterip::thread_data_out_keep_V_1_ack_in() {
    data_out_keep_V_1_ack_in = data_out_keep_V_1_state.read()[1];
}

void counterip::thread_data_out_keep_V_1_ack_out() {
    data_out_keep_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_keep_V_1_data_out() {
    data_out_keep_V_1_data_out = ap_const_lv4_F;
}

void counterip::thread_data_out_keep_V_1_sel() {
    data_out_keep_V_1_sel = data_out_keep_V_1_sel_rd.read();
}

void counterip::thread_data_out_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_keep_V_1_vld_out() {
    data_out_keep_V_1_vld_out = data_out_keep_V_1_state.read()[0];
}

void counterip::thread_data_out_last_V_1_ack_in() {
    data_out_last_V_1_ack_in = data_out_last_V_1_state.read()[1];
}

void counterip::thread_data_out_last_V_1_ack_out() {
    data_out_last_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, data_out_last_V_1_sel.read())) {
        data_out_last_V_1_data_out = data_out_last_V_1_payload_B.read();
    } else {
        data_out_last_V_1_data_out = data_out_last_V_1_payload_A.read();
    }
}

void counterip::thread_data_out_last_V_1_load_A() {
    data_out_last_V_1_load_A = (data_out_last_V_1_state_cmp_full.read() & ~data_out_last_V_1_sel_wr.read());
}

void counterip::thread_data_out_last_V_1_load_B() {
    data_out_last_V_1_load_B = (data_out_last_V_1_sel_wr.read() & data_out_last_V_1_state_cmp_full.read());
}

void counterip::thread_data_out_last_V_1_sel() {
    data_out_last_V_1_sel = data_out_last_V_1_sel_rd.read();
}

void counterip::thread_data_out_last_V_1_state_cmp_full() {
    data_out_last_V_1_state_cmp_full =  (sc_logic) ((!data_out_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(data_out_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void counterip::thread_data_out_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_last_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_last_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_last_V_1_vld_out() {
    data_out_last_V_1_vld_out = data_out_last_V_1_state.read()[0];
}

void counterip::thread_data_out_strb_V_1_ack_in() {
    data_out_strb_V_1_ack_in = data_out_strb_V_1_state.read()[1];
}

void counterip::thread_data_out_strb_V_1_ack_out() {
    data_out_strb_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_strb_V_1_data_out() {
    data_out_strb_V_1_data_out = ap_const_lv4_0;
}

void counterip::thread_data_out_strb_V_1_sel() {
    data_out_strb_V_1_sel = data_out_strb_V_1_sel_rd.read();
}

void counterip::thread_data_out_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_strb_V_1_vld_out() {
    data_out_strb_V_1_vld_out = data_out_strb_V_1_state.read()[0];
}

void counterip::thread_data_out_user_V_1_ack_in() {
    data_out_user_V_1_ack_in = data_out_user_V_1_state.read()[1];
}

void counterip::thread_data_out_user_V_1_ack_out() {
    data_out_user_V_1_ack_out = data_out_TREADY.read();
}

void counterip::thread_data_out_user_V_1_data_out() {
    data_out_user_V_1_data_out = ap_const_lv1_0;
}

void counterip::thread_data_out_user_V_1_sel() {
    data_out_user_V_1_sel = data_out_user_V_1_sel_rd.read();
}

void counterip::thread_data_out_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_170.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_out_user_V_1_vld_in = ap_const_logic_1;
    } else {
        data_out_user_V_1_vld_in = ap_const_logic_0;
    }
}

void counterip::thread_data_out_user_V_1_vld_out() {
    data_out_user_V_1_vld_out = data_out_user_V_1_state.read()[0];
}

void counterip::thread_i_fu_149_p2() {
    i_fu_149_p2 = (!ap_phi_mux_val_assign_phi_fu_108_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_val_assign_phi_fu_108_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void counterip::thread_lhs_V_fu_119_p1() {
    lhs_V_fu_119_p1 = esl_zext<34,32>(start_V.read());
}

void counterip::thread_r_V_1_fu_129_p2() {
    r_V_1_fu_129_p2 = (!r_V_fu_123_p2.read().is_01() || !ap_const_lv34_3FFFFFFFF.is_01())? sc_lv<34>(): (sc_biguint<34>(r_V_fu_123_p2.read()) + sc_bigint<34>(ap_const_lv34_3FFFFFFFF));
}

void counterip::thread_r_V_fu_123_p2() {
    r_V_fu_123_p2 = (!lhs_V_fu_119_p1.read().is_01() || !rhs_V_fu_115_p1.read().is_01())? sc_lv<34>(): (sc_biguint<34>(lhs_V_fu_119_p1.read()) + sc_bigint<34>(rhs_V_fu_115_p1.read()));
}

void counterip::thread_rhs_V_fu_115_p1() {
    rhs_V_fu_115_p1 = esl_sext<34,32>(beats.read());
}

void counterip::thread_tmp_1_cast_fu_135_p1() {
    tmp_1_cast_fu_135_p1 = esl_sext<34,32>(ap_phi_mux_val_assign_phi_fu_108_p4.read());
}

void counterip::thread_tmp_3_fu_139_p2() {
    tmp_3_fu_139_p2 = (!tmp_1_cast_fu_135_p1.read().is_01() || !r_V_reg_160.read().is_01())? sc_lv<1>(): (sc_bigint<34>(tmp_1_cast_fu_135_p1.read()) < sc_bigint<34>(r_V_reg_160.read()));
}

void counterip::thread_val_assign_1_fu_144_p2() {
    val_assign_1_fu_144_p2 = (!tmp_1_cast_fu_135_p1.read().is_01() || !r_V_1_reg_165.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_cast_fu_135_p1.read() == r_V_1_reg_165.read());
}

void counterip::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_139_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_139_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data_out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_out_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void counterip::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_out_TDATA\" :  \"" << data_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TVALID\" :  \"" << data_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_TREADY\" :  \"" << data_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TKEEP\" :  \"" << data_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TSTRB\" :  \"" << data_out_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TUSER\" :  \"" << data_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TLAST\" :  \"" << data_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TID\" :  \"" << data_out_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_TDEST\" :  \"" << data_out_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_AWVALID\" :  \"" << s_axi_config_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_AWREADY\" :  \"" << s_axi_config_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_AWADDR\" :  \"" << s_axi_config_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_WVALID\" :  \"" << s_axi_config_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_WREADY\" :  \"" << s_axi_config_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_WDATA\" :  \"" << s_axi_config_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_WSTRB\" :  \"" << s_axi_config_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_ARVALID\" :  \"" << s_axi_config_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_ARREADY\" :  \"" << s_axi_config_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_ARADDR\" :  \"" << s_axi_config_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_RVALID\" :  \"" << s_axi_config_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_RREADY\" :  \"" << s_axi_config_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_RDATA\" :  \"" << s_axi_config_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_RRESP\" :  \"" << s_axi_config_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_BVALID\" :  \"" << s_axi_config_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_config_BREADY\" :  \"" << s_axi_config_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_config_BRESP\" :  \"" << s_axi_config_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

