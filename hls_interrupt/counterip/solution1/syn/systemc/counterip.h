// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _counterip_HH_
#define _counterip_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "counterip_config_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONFIG_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONFIG_DATA_WIDTH = 32>
struct counterip : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > data_out_TDATA;
    sc_out< sc_logic > data_out_TVALID;
    sc_in< sc_logic > data_out_TREADY;
    sc_out< sc_lv<4> > data_out_TKEEP;
    sc_out< sc_lv<4> > data_out_TSTRB;
    sc_out< sc_lv<1> > data_out_TUSER;
    sc_out< sc_lv<1> > data_out_TLAST;
    sc_out< sc_lv<1> > data_out_TID;
    sc_out< sc_lv<1> > data_out_TDEST;
    sc_in< sc_logic > s_axi_config_AWVALID;
    sc_out< sc_logic > s_axi_config_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONFIG_ADDR_WIDTH> > s_axi_config_AWADDR;
    sc_in< sc_logic > s_axi_config_WVALID;
    sc_out< sc_logic > s_axi_config_WREADY;
    sc_in< sc_uint<C_S_AXI_CONFIG_DATA_WIDTH> > s_axi_config_WDATA;
    sc_in< sc_uint<C_S_AXI_CONFIG_DATA_WIDTH/8> > s_axi_config_WSTRB;
    sc_in< sc_logic > s_axi_config_ARVALID;
    sc_out< sc_logic > s_axi_config_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONFIG_ADDR_WIDTH> > s_axi_config_ARADDR;
    sc_out< sc_logic > s_axi_config_RVALID;
    sc_in< sc_logic > s_axi_config_RREADY;
    sc_out< sc_uint<C_S_AXI_CONFIG_DATA_WIDTH> > s_axi_config_RDATA;
    sc_out< sc_lv<2> > s_axi_config_RRESP;
    sc_out< sc_logic > s_axi_config_BVALID;
    sc_in< sc_logic > s_axi_config_BREADY;
    sc_out< sc_lv<2> > s_axi_config_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    counterip(sc_module_name name);
    SC_HAS_PROCESS(counterip);

    ~counterip();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    counterip_config_s_axi<C_S_AXI_CONFIG_ADDR_WIDTH,C_S_AXI_CONFIG_DATA_WIDTH>* counterip_config_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > data_out_data_V_1_data_out;
    sc_signal< sc_logic > data_out_data_V_1_vld_in;
    sc_signal< sc_logic > data_out_data_V_1_vld_out;
    sc_signal< sc_logic > data_out_data_V_1_ack_in;
    sc_signal< sc_logic > data_out_data_V_1_ack_out;
    sc_signal< sc_lv<32> > data_out_data_V_1_payload_A;
    sc_signal< sc_lv<32> > data_out_data_V_1_payload_B;
    sc_signal< sc_logic > data_out_data_V_1_sel_rd;
    sc_signal< sc_logic > data_out_data_V_1_sel_wr;
    sc_signal< sc_logic > data_out_data_V_1_sel;
    sc_signal< sc_logic > data_out_data_V_1_load_A;
    sc_signal< sc_logic > data_out_data_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_data_V_1_state;
    sc_signal< sc_logic > data_out_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > data_out_keep_V_1_data_out;
    sc_signal< sc_logic > data_out_keep_V_1_vld_in;
    sc_signal< sc_logic > data_out_keep_V_1_vld_out;
    sc_signal< sc_logic > data_out_keep_V_1_ack_in;
    sc_signal< sc_logic > data_out_keep_V_1_ack_out;
    sc_signal< sc_logic > data_out_keep_V_1_sel_rd;
    sc_signal< sc_logic > data_out_keep_V_1_sel;
    sc_signal< sc_lv<2> > data_out_keep_V_1_state;
    sc_signal< sc_lv<4> > data_out_strb_V_1_data_out;
    sc_signal< sc_logic > data_out_strb_V_1_vld_in;
    sc_signal< sc_logic > data_out_strb_V_1_vld_out;
    sc_signal< sc_logic > data_out_strb_V_1_ack_in;
    sc_signal< sc_logic > data_out_strb_V_1_ack_out;
    sc_signal< sc_logic > data_out_strb_V_1_sel_rd;
    sc_signal< sc_logic > data_out_strb_V_1_sel;
    sc_signal< sc_lv<2> > data_out_strb_V_1_state;
    sc_signal< sc_lv<1> > data_out_user_V_1_data_out;
    sc_signal< sc_logic > data_out_user_V_1_vld_in;
    sc_signal< sc_logic > data_out_user_V_1_vld_out;
    sc_signal< sc_logic > data_out_user_V_1_ack_in;
    sc_signal< sc_logic > data_out_user_V_1_ack_out;
    sc_signal< sc_logic > data_out_user_V_1_sel_rd;
    sc_signal< sc_logic > data_out_user_V_1_sel;
    sc_signal< sc_lv<2> > data_out_user_V_1_state;
    sc_signal< sc_lv<1> > data_out_last_V_1_data_out;
    sc_signal< sc_logic > data_out_last_V_1_vld_in;
    sc_signal< sc_logic > data_out_last_V_1_vld_out;
    sc_signal< sc_logic > data_out_last_V_1_ack_in;
    sc_signal< sc_logic > data_out_last_V_1_ack_out;
    sc_signal< sc_lv<1> > data_out_last_V_1_payload_A;
    sc_signal< sc_lv<1> > data_out_last_V_1_payload_B;
    sc_signal< sc_logic > data_out_last_V_1_sel_rd;
    sc_signal< sc_logic > data_out_last_V_1_sel_wr;
    sc_signal< sc_logic > data_out_last_V_1_sel;
    sc_signal< sc_logic > data_out_last_V_1_load_A;
    sc_signal< sc_logic > data_out_last_V_1_load_B;
    sc_signal< sc_lv<2> > data_out_last_V_1_state;
    sc_signal< sc_logic > data_out_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > data_out_id_V_1_data_out;
    sc_signal< sc_logic > data_out_id_V_1_vld_in;
    sc_signal< sc_logic > data_out_id_V_1_vld_out;
    sc_signal< sc_logic > data_out_id_V_1_ack_in;
    sc_signal< sc_logic > data_out_id_V_1_ack_out;
    sc_signal< sc_logic > data_out_id_V_1_sel_rd;
    sc_signal< sc_logic > data_out_id_V_1_sel;
    sc_signal< sc_lv<2> > data_out_id_V_1_state;
    sc_signal< sc_lv<1> > data_out_dest_V_1_data_out;
    sc_signal< sc_logic > data_out_dest_V_1_vld_in;
    sc_signal< sc_logic > data_out_dest_V_1_vld_out;
    sc_signal< sc_logic > data_out_dest_V_1_ack_in;
    sc_signal< sc_logic > data_out_dest_V_1_ack_out;
    sc_signal< sc_logic > data_out_dest_V_1_sel_rd;
    sc_signal< sc_logic > data_out_dest_V_1_sel;
    sc_signal< sc_lv<2> > data_out_dest_V_1_state;
    sc_signal< sc_lv<32> > beats;
    sc_signal< sc_lv<32> > start_V;
    sc_signal< sc_logic > data_out_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_3_reg_170;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_tmp_3_reg_170;
    sc_signal< sc_lv<32> > val_assign_reg_104;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<34> > r_V_fu_123_p2;
    sc_signal< sc_lv<34> > r_V_reg_160;
    sc_signal< sc_lv<34> > r_V_1_fu_129_p2;
    sc_signal< sc_lv<34> > r_V_1_reg_165;
    sc_signal< sc_lv<1> > tmp_3_fu_139_p2;
    sc_signal< sc_lv<1> > val_assign_1_fu_144_p2;
    sc_signal< sc_lv<1> > val_assign_1_reg_174;
    sc_signal< sc_lv<32> > i_fu_149_p2;
    sc_signal< sc_lv<32> > i_reg_179;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<32> > ap_phi_mux_val_assign_phi_fu_108_p4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<34> > lhs_V_fu_119_p1;
    sc_signal< sc_lv<34> > rhs_V_fu_115_p1;
    sc_signal< sc_lv<34> > tmp_1_cast_fu_135_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<34> ap_const_lv34_3FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_val_assign_phi_fu_108_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_data_out_TDATA();
    void thread_data_out_TDATA_blk_n();
    void thread_data_out_TDEST();
    void thread_data_out_TID();
    void thread_data_out_TKEEP();
    void thread_data_out_TLAST();
    void thread_data_out_TSTRB();
    void thread_data_out_TUSER();
    void thread_data_out_TVALID();
    void thread_data_out_data_V_1_ack_in();
    void thread_data_out_data_V_1_ack_out();
    void thread_data_out_data_V_1_data_out();
    void thread_data_out_data_V_1_load_A();
    void thread_data_out_data_V_1_load_B();
    void thread_data_out_data_V_1_sel();
    void thread_data_out_data_V_1_state_cmp_full();
    void thread_data_out_data_V_1_vld_in();
    void thread_data_out_data_V_1_vld_out();
    void thread_data_out_dest_V_1_ack_in();
    void thread_data_out_dest_V_1_ack_out();
    void thread_data_out_dest_V_1_data_out();
    void thread_data_out_dest_V_1_sel();
    void thread_data_out_dest_V_1_vld_in();
    void thread_data_out_dest_V_1_vld_out();
    void thread_data_out_id_V_1_ack_in();
    void thread_data_out_id_V_1_ack_out();
    void thread_data_out_id_V_1_data_out();
    void thread_data_out_id_V_1_sel();
    void thread_data_out_id_V_1_vld_in();
    void thread_data_out_id_V_1_vld_out();
    void thread_data_out_keep_V_1_ack_in();
    void thread_data_out_keep_V_1_ack_out();
    void thread_data_out_keep_V_1_data_out();
    void thread_data_out_keep_V_1_sel();
    void thread_data_out_keep_V_1_vld_in();
    void thread_data_out_keep_V_1_vld_out();
    void thread_data_out_last_V_1_ack_in();
    void thread_data_out_last_V_1_ack_out();
    void thread_data_out_last_V_1_data_out();
    void thread_data_out_last_V_1_load_A();
    void thread_data_out_last_V_1_load_B();
    void thread_data_out_last_V_1_sel();
    void thread_data_out_last_V_1_state_cmp_full();
    void thread_data_out_last_V_1_vld_in();
    void thread_data_out_last_V_1_vld_out();
    void thread_data_out_strb_V_1_ack_in();
    void thread_data_out_strb_V_1_ack_out();
    void thread_data_out_strb_V_1_data_out();
    void thread_data_out_strb_V_1_sel();
    void thread_data_out_strb_V_1_vld_in();
    void thread_data_out_strb_V_1_vld_out();
    void thread_data_out_user_V_1_ack_in();
    void thread_data_out_user_V_1_ack_out();
    void thread_data_out_user_V_1_data_out();
    void thread_data_out_user_V_1_sel();
    void thread_data_out_user_V_1_vld_in();
    void thread_data_out_user_V_1_vld_out();
    void thread_i_fu_149_p2();
    void thread_lhs_V_fu_119_p1();
    void thread_r_V_1_fu_129_p2();
    void thread_r_V_fu_123_p2();
    void thread_rhs_V_fu_115_p1();
    void thread_tmp_1_cast_fu_135_p1();
    void thread_tmp_3_fu_139_p2();
    void thread_val_assign_1_fu_144_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
