-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity counterip is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of counterip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "counterip,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.036500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=342,HLS_SYN_LUT=626}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv34_3FFFFFFFF : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_out_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_data_V_1_vld_in : STD_LOGIC;
    signal data_out_data_V_1_vld_out : STD_LOGIC;
    signal data_out_data_V_1_ack_in : STD_LOGIC;
    signal data_out_data_V_1_ack_out : STD_LOGIC;
    signal data_out_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_data_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_data_V_1_sel_wr : STD_LOGIC := '0';
    signal data_out_data_V_1_sel : STD_LOGIC;
    signal data_out_data_V_1_load_A : STD_LOGIC;
    signal data_out_data_V_1_load_B : STD_LOGIC;
    signal data_out_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_data_V_1_state_cmp_full : STD_LOGIC;
    signal data_out_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal data_out_keep_V_1_vld_in : STD_LOGIC;
    signal data_out_keep_V_1_vld_out : STD_LOGIC;
    signal data_out_keep_V_1_ack_in : STD_LOGIC;
    signal data_out_keep_V_1_ack_out : STD_LOGIC;
    signal data_out_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_keep_V_1_sel : STD_LOGIC;
    signal data_out_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal data_out_strb_V_1_vld_in : STD_LOGIC;
    signal data_out_strb_V_1_vld_out : STD_LOGIC;
    signal data_out_strb_V_1_ack_in : STD_LOGIC;
    signal data_out_strb_V_1_ack_out : STD_LOGIC;
    signal data_out_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_strb_V_1_sel : STD_LOGIC;
    signal data_out_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_user_V_1_vld_in : STD_LOGIC;
    signal data_out_user_V_1_vld_out : STD_LOGIC;
    signal data_out_user_V_1_ack_in : STD_LOGIC;
    signal data_out_user_V_1_ack_out : STD_LOGIC;
    signal data_out_user_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_user_V_1_sel : STD_LOGIC;
    signal data_out_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_last_V_1_vld_in : STD_LOGIC;
    signal data_out_last_V_1_vld_out : STD_LOGIC;
    signal data_out_last_V_1_ack_in : STD_LOGIC;
    signal data_out_last_V_1_ack_out : STD_LOGIC;
    signal data_out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal data_out_last_V_1_sel : STD_LOGIC;
    signal data_out_last_V_1_load_A : STD_LOGIC;
    signal data_out_last_V_1_load_B : STD_LOGIC;
    signal data_out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_last_V_1_state_cmp_full : STD_LOGIC;
    signal data_out_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_id_V_1_vld_in : STD_LOGIC;
    signal data_out_id_V_1_vld_out : STD_LOGIC;
    signal data_out_id_V_1_ack_in : STD_LOGIC;
    signal data_out_id_V_1_ack_out : STD_LOGIC;
    signal data_out_id_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_id_V_1_sel : STD_LOGIC;
    signal data_out_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_dest_V_1_vld_in : STD_LOGIC;
    signal data_out_dest_V_1_vld_out : STD_LOGIC;
    signal data_out_dest_V_1_ack_in : STD_LOGIC;
    signal data_out_dest_V_1_ack_out : STD_LOGIC;
    signal data_out_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_dest_V_1_sel : STD_LOGIC;
    signal data_out_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal beats : STD_LOGIC_VECTOR (31 downto 0);
    signal start_V : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_tmp_3_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_V_fu_123_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_reg_160 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_1_fu_129_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_1_reg_165 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_3_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_val_assign_phi_fu_108_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_V_fu_119_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal rhs_V_fu_115_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_1_cast_fu_135_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component counterip_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        beats : OUT STD_LOGIC_VECTOR (31 downto 0);
        start_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    counterip_config_s_axi_U : component counterip_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        beats => beats,
        start_V => start_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_out_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_data_V_1_ack_out = ap_const_logic_1) and (data_out_data_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_data_V_1_sel_rd <= not(data_out_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_out_data_V_1_ack_in = ap_const_logic_1) and (data_out_data_V_1_vld_in = ap_const_logic_1))) then 
                                        data_out_data_V_1_sel_wr <= not(data_out_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_out_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_data_V_1_state = ap_const_lv2_2) and (data_out_data_V_1_vld_in = ap_const_logic_0)) or ((data_out_data_V_1_state = ap_const_lv2_3) and (data_out_data_V_1_vld_in = ap_const_logic_0) and (data_out_data_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_data_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_data_V_1_state = ap_const_lv2_1) and (data_out_data_V_1_ack_out = ap_const_logic_0)) or ((data_out_data_V_1_state = ap_const_lv2_3) and (data_out_data_V_1_ack_out = ap_const_logic_0) and (data_out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_data_V_1_vld_in = ap_const_logic_0) and (data_out_data_V_1_ack_out = ap_const_logic_1))) and not(((data_out_data_V_1_ack_out = ap_const_logic_0) and (data_out_data_V_1_vld_in = ap_const_logic_1))) and (data_out_data_V_1_state = ap_const_lv2_3)) or ((data_out_data_V_1_state = ap_const_lv2_1) and (data_out_data_V_1_ack_out = ap_const_logic_1)) or ((data_out_data_V_1_state = ap_const_lv2_2) and (data_out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_data_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_dest_V_1_ack_out = ap_const_logic_1) and (data_out_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_dest_V_1_sel_rd <= not(data_out_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_dest_V_1_state = ap_const_lv2_2) and (data_out_dest_V_1_vld_in = ap_const_logic_0)) or ((data_out_dest_V_1_state = ap_const_lv2_3) and (data_out_dest_V_1_vld_in = ap_const_logic_0) and (data_out_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_dest_V_1_state = ap_const_lv2_1) and (data_out_dest_V_1_ack_out = ap_const_logic_0)) or ((data_out_dest_V_1_state = ap_const_lv2_3) and (data_out_dest_V_1_ack_out = ap_const_logic_0) and (data_out_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_dest_V_1_vld_in = ap_const_logic_0) and (data_out_dest_V_1_ack_out = ap_const_logic_1))) and not(((data_out_dest_V_1_ack_out = ap_const_logic_0) and (data_out_dest_V_1_vld_in = ap_const_logic_1))) and (data_out_dest_V_1_state = ap_const_lv2_3)) or ((data_out_dest_V_1_state = ap_const_lv2_1) and (data_out_dest_V_1_ack_out = ap_const_logic_1)) or ((data_out_dest_V_1_state = ap_const_lv2_2) and (data_out_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_dest_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_id_V_1_ack_out = ap_const_logic_1) and (data_out_id_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_id_V_1_sel_rd <= not(data_out_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_id_V_1_state = ap_const_lv2_2) and (data_out_id_V_1_vld_in = ap_const_logic_0)) or ((data_out_id_V_1_state = ap_const_lv2_3) and (data_out_id_V_1_vld_in = ap_const_logic_0) and (data_out_id_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_id_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_id_V_1_state = ap_const_lv2_1) and (data_out_id_V_1_ack_out = ap_const_logic_0)) or ((data_out_id_V_1_state = ap_const_lv2_3) and (data_out_id_V_1_ack_out = ap_const_logic_0) and (data_out_id_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_id_V_1_vld_in = ap_const_logic_0) and (data_out_id_V_1_ack_out = ap_const_logic_1))) and not(((data_out_id_V_1_ack_out = ap_const_logic_0) and (data_out_id_V_1_vld_in = ap_const_logic_1))) and (data_out_id_V_1_state = ap_const_lv2_3)) or ((data_out_id_V_1_state = ap_const_lv2_1) and (data_out_id_V_1_ack_out = ap_const_logic_1)) or ((data_out_id_V_1_state = ap_const_lv2_2) and (data_out_id_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_id_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_keep_V_1_ack_out = ap_const_logic_1) and (data_out_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_keep_V_1_sel_rd <= not(data_out_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_keep_V_1_state = ap_const_lv2_2) and (data_out_keep_V_1_vld_in = ap_const_logic_0)) or ((data_out_keep_V_1_state = ap_const_lv2_3) and (data_out_keep_V_1_vld_in = ap_const_logic_0) and (data_out_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_keep_V_1_state = ap_const_lv2_1) and (data_out_keep_V_1_ack_out = ap_const_logic_0)) or ((data_out_keep_V_1_state = ap_const_lv2_3) and (data_out_keep_V_1_ack_out = ap_const_logic_0) and (data_out_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_keep_V_1_vld_in = ap_const_logic_0) and (data_out_keep_V_1_ack_out = ap_const_logic_1))) and not(((data_out_keep_V_1_ack_out = ap_const_logic_0) and (data_out_keep_V_1_vld_in = ap_const_logic_1))) and (data_out_keep_V_1_state = ap_const_lv2_3)) or ((data_out_keep_V_1_state = ap_const_lv2_1) and (data_out_keep_V_1_ack_out = ap_const_logic_1)) or ((data_out_keep_V_1_state = ap_const_lv2_2) and (data_out_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_keep_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_last_V_1_ack_out = ap_const_logic_1) and (data_out_last_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_last_V_1_sel_rd <= not(data_out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_out_last_V_1_ack_in = ap_const_logic_1) and (data_out_last_V_1_vld_in = ap_const_logic_1))) then 
                                        data_out_last_V_1_sel_wr <= not(data_out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_last_V_1_state = ap_const_lv2_2) and (data_out_last_V_1_vld_in = ap_const_logic_0)) or ((data_out_last_V_1_state = ap_const_lv2_3) and (data_out_last_V_1_vld_in = ap_const_logic_0) and (data_out_last_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_last_V_1_state = ap_const_lv2_1) and (data_out_last_V_1_ack_out = ap_const_logic_0)) or ((data_out_last_V_1_state = ap_const_lv2_3) and (data_out_last_V_1_ack_out = ap_const_logic_0) and (data_out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_last_V_1_vld_in = ap_const_logic_0) and (data_out_last_V_1_ack_out = ap_const_logic_1))) and not(((data_out_last_V_1_ack_out = ap_const_logic_0) and (data_out_last_V_1_vld_in = ap_const_logic_1))) and (data_out_last_V_1_state = ap_const_lv2_3)) or ((data_out_last_V_1_state = ap_const_lv2_1) and (data_out_last_V_1_ack_out = ap_const_logic_1)) or ((data_out_last_V_1_state = ap_const_lv2_2) and (data_out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_last_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_strb_V_1_ack_out = ap_const_logic_1) and (data_out_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_strb_V_1_sel_rd <= not(data_out_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_strb_V_1_state = ap_const_lv2_2) and (data_out_strb_V_1_vld_in = ap_const_logic_0)) or ((data_out_strb_V_1_state = ap_const_lv2_3) and (data_out_strb_V_1_vld_in = ap_const_logic_0) and (data_out_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_strb_V_1_state = ap_const_lv2_1) and (data_out_strb_V_1_ack_out = ap_const_logic_0)) or ((data_out_strb_V_1_state = ap_const_lv2_3) and (data_out_strb_V_1_ack_out = ap_const_logic_0) and (data_out_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_strb_V_1_vld_in = ap_const_logic_0) and (data_out_strb_V_1_ack_out = ap_const_logic_1))) and not(((data_out_strb_V_1_ack_out = ap_const_logic_0) and (data_out_strb_V_1_vld_in = ap_const_logic_1))) and (data_out_strb_V_1_state = ap_const_lv2_3)) or ((data_out_strb_V_1_state = ap_const_lv2_1) and (data_out_strb_V_1_ack_out = ap_const_logic_1)) or ((data_out_strb_V_1_state = ap_const_lv2_2) and (data_out_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_strb_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_user_V_1_ack_out = ap_const_logic_1) and (data_out_user_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_user_V_1_sel_rd <= not(data_out_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_user_V_1_state = ap_const_lv2_2) and (data_out_user_V_1_vld_in = ap_const_logic_0)) or ((data_out_user_V_1_state = ap_const_lv2_3) and (data_out_user_V_1_vld_in = ap_const_logic_0) and (data_out_user_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_user_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_user_V_1_state = ap_const_lv2_1) and (data_out_user_V_1_ack_out = ap_const_logic_0)) or ((data_out_user_V_1_state = ap_const_lv2_3) and (data_out_user_V_1_ack_out = ap_const_logic_0) and (data_out_user_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_user_V_1_vld_in = ap_const_logic_0) and (data_out_user_V_1_ack_out = ap_const_logic_1))) and not(((data_out_user_V_1_ack_out = ap_const_logic_0) and (data_out_user_V_1_vld_in = ap_const_logic_1))) and (data_out_user_V_1_state = ap_const_lv2_3)) or ((data_out_user_V_1_state = ap_const_lv2_1) and (data_out_user_V_1_ack_out = ap_const_logic_1)) or ((data_out_user_V_1_state = ap_const_lv2_2) and (data_out_user_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_user_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    val_assign_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                val_assign_reg_104 <= i_reg_179;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                val_assign_reg_104 <= start_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_3_reg_170 <= tmp_3_reg_170;
                tmp_3_reg_170 <= tmp_3_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_data_V_1_load_A = ap_const_logic_1)) then
                data_out_data_V_1_payload_A <= val_assign_reg_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_data_V_1_load_B = ap_const_logic_1)) then
                data_out_data_V_1_payload_B <= val_assign_reg_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_last_V_1_load_A = ap_const_logic_1)) then
                data_out_last_V_1_payload_A <= val_assign_1_reg_174;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_last_V_1_load_B = ap_const_logic_1)) then
                data_out_last_V_1_payload_B <= val_assign_1_reg_174;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_fu_139_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_179 <= i_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                r_V_1_reg_165 <= r_V_1_fu_129_p2;
                r_V_reg_160 <= r_V_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                val_assign_1_reg_174 <= val_assign_1_fu_144_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_out_data_V_1_ack_in, data_out_keep_V_1_ack_in, data_out_strb_V_1_ack_in, data_out_user_V_1_ack_in, data_out_last_V_1_ack_in, data_out_id_V_1_ack_in, data_out_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_3_fu_139_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_3_fu_139_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_3_fu_139_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((data_out_keep_V_1_ack_in = ap_const_logic_0) or (data_out_dest_V_1_ack_in = ap_const_logic_0) or (data_out_data_V_1_ack_in = ap_const_logic_0) or (data_out_id_V_1_ack_in = ap_const_logic_0) or (data_out_last_V_1_ack_in = ap_const_logic_0) or (data_out_user_V_1_ack_in = ap_const_logic_0) or (data_out_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(data_out_data_V_1_ack_in, tmp_3_reg_170)
    begin
                ap_block_state3_io <= ((tmp_3_reg_170 = ap_const_lv1_1) and (data_out_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(data_out_data_V_1_ack_in, ap_reg_pp0_iter1_tmp_3_reg_170)
    begin
                ap_block_state4_io <= ((ap_reg_pp0_iter1_tmp_3_reg_170 = ap_const_lv1_1) and (data_out_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(data_out_data_V_1_ack_in, data_out_keep_V_1_ack_in, data_out_strb_V_1_ack_in, data_out_user_V_1_ack_in, data_out_last_V_1_ack_in, data_out_id_V_1_ack_in, data_out_dest_V_1_ack_in)
    begin
                ap_block_state5 <= ((data_out_keep_V_1_ack_in = ap_const_logic_0) or (data_out_dest_V_1_ack_in = ap_const_logic_0) or (data_out_data_V_1_ack_in = ap_const_logic_0) or (data_out_id_V_1_ack_in = ap_const_logic_0) or (data_out_last_V_1_ack_in = ap_const_logic_0) or (data_out_user_V_1_ack_in = ap_const_logic_0) or (data_out_strb_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_3_fu_139_p2)
    begin
        if ((tmp_3_fu_139_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(data_out_data_V_1_ack_in, data_out_keep_V_1_ack_in, data_out_strb_V_1_ack_in, data_out_user_V_1_ack_in, data_out_last_V_1_ack_in, data_out_id_V_1_ack_in, data_out_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((data_out_keep_V_1_ack_in = ap_const_logic_0) or (data_out_dest_V_1_ack_in = ap_const_logic_0) or (data_out_data_V_1_ack_in = ap_const_logic_0) or (data_out_id_V_1_ack_in = ap_const_logic_0) or (data_out_last_V_1_ack_in = ap_const_logic_0) or (data_out_user_V_1_ack_in = ap_const_logic_0) or (data_out_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_val_assign_phi_fu_108_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_3_reg_170, val_assign_reg_104, i_reg_179)
    begin
        if (((tmp_3_reg_170 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_val_assign_phi_fu_108_p4 <= i_reg_179;
        else 
            ap_phi_mux_val_assign_phi_fu_108_p4 <= val_assign_reg_104;
        end if; 
    end process;


    ap_ready_assign_proc : process(data_out_data_V_1_ack_in, data_out_keep_V_1_ack_in, data_out_strb_V_1_ack_in, data_out_user_V_1_ack_in, data_out_last_V_1_ack_in, data_out_id_V_1_ack_in, data_out_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((data_out_keep_V_1_ack_in = ap_const_logic_0) or (data_out_dest_V_1_ack_in = ap_const_logic_0) or (data_out_data_V_1_ack_in = ap_const_logic_0) or (data_out_id_V_1_ack_in = ap_const_logic_0) or (data_out_last_V_1_ack_in = ap_const_logic_0) or (data_out_user_V_1_ack_in = ap_const_logic_0) or (data_out_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_out_TDATA <= data_out_data_V_1_data_out;

    data_out_TDATA_blk_n_assign_proc : process(data_out_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_3_reg_170, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_3_reg_170)
    begin
        if ((((ap_reg_pp0_iter1_tmp_3_reg_170 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_3_reg_170 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_out_TDATA_blk_n <= data_out_data_V_1_state(1);
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TDEST <= data_out_dest_V_1_data_out;
    data_out_TID <= data_out_id_V_1_data_out;
    data_out_TKEEP <= data_out_keep_V_1_data_out;
    data_out_TLAST <= data_out_last_V_1_data_out;
    data_out_TSTRB <= data_out_strb_V_1_data_out;
    data_out_TUSER <= data_out_user_V_1_data_out;
    data_out_TVALID <= data_out_dest_V_1_state(0);
    data_out_data_V_1_ack_in <= data_out_data_V_1_state(1);
    data_out_data_V_1_ack_out <= data_out_TREADY;

    data_out_data_V_1_data_out_assign_proc : process(data_out_data_V_1_payload_A, data_out_data_V_1_payload_B, data_out_data_V_1_sel)
    begin
        if ((data_out_data_V_1_sel = ap_const_logic_1)) then 
            data_out_data_V_1_data_out <= data_out_data_V_1_payload_B;
        else 
            data_out_data_V_1_data_out <= data_out_data_V_1_payload_A;
        end if; 
    end process;

    data_out_data_V_1_load_A <= (not(data_out_data_V_1_sel_wr) and data_out_data_V_1_state_cmp_full);
    data_out_data_V_1_load_B <= (data_out_data_V_1_state_cmp_full and data_out_data_V_1_sel_wr);
    data_out_data_V_1_sel <= data_out_data_V_1_sel_rd;
    data_out_data_V_1_state_cmp_full <= '0' when (data_out_data_V_1_state = ap_const_lv2_1) else '1';

    data_out_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_data_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_data_V_1_vld_out <= data_out_data_V_1_state(0);
    data_out_dest_V_1_ack_in <= data_out_dest_V_1_state(1);
    data_out_dest_V_1_ack_out <= data_out_TREADY;
    data_out_dest_V_1_data_out <= ap_const_lv1_0;
    data_out_dest_V_1_sel <= data_out_dest_V_1_sel_rd;

    data_out_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_dest_V_1_vld_out <= data_out_dest_V_1_state(0);
    data_out_id_V_1_ack_in <= data_out_id_V_1_state(1);
    data_out_id_V_1_ack_out <= data_out_TREADY;
    data_out_id_V_1_data_out <= ap_const_lv1_0;
    data_out_id_V_1_sel <= data_out_id_V_1_sel_rd;

    data_out_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_id_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_id_V_1_vld_out <= data_out_id_V_1_state(0);
    data_out_keep_V_1_ack_in <= data_out_keep_V_1_state(1);
    data_out_keep_V_1_ack_out <= data_out_TREADY;
    data_out_keep_V_1_data_out <= ap_const_lv4_F;
    data_out_keep_V_1_sel <= data_out_keep_V_1_sel_rd;

    data_out_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_keep_V_1_vld_out <= data_out_keep_V_1_state(0);
    data_out_last_V_1_ack_in <= data_out_last_V_1_state(1);
    data_out_last_V_1_ack_out <= data_out_TREADY;

    data_out_last_V_1_data_out_assign_proc : process(data_out_last_V_1_payload_A, data_out_last_V_1_payload_B, data_out_last_V_1_sel)
    begin
        if ((data_out_last_V_1_sel = ap_const_logic_1)) then 
            data_out_last_V_1_data_out <= data_out_last_V_1_payload_B;
        else 
            data_out_last_V_1_data_out <= data_out_last_V_1_payload_A;
        end if; 
    end process;

    data_out_last_V_1_load_A <= (not(data_out_last_V_1_sel_wr) and data_out_last_V_1_state_cmp_full);
    data_out_last_V_1_load_B <= (data_out_last_V_1_state_cmp_full and data_out_last_V_1_sel_wr);
    data_out_last_V_1_sel <= data_out_last_V_1_sel_rd;
    data_out_last_V_1_state_cmp_full <= '0' when (data_out_last_V_1_state = ap_const_lv2_1) else '1';

    data_out_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_last_V_1_vld_out <= data_out_last_V_1_state(0);
    data_out_strb_V_1_ack_in <= data_out_strb_V_1_state(1);
    data_out_strb_V_1_ack_out <= data_out_TREADY;
    data_out_strb_V_1_data_out <= ap_const_lv4_0;
    data_out_strb_V_1_sel <= data_out_strb_V_1_sel_rd;

    data_out_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_strb_V_1_vld_out <= data_out_strb_V_1_state(0);
    data_out_user_V_1_ack_in <= data_out_user_V_1_state(1);
    data_out_user_V_1_ack_out <= data_out_TREADY;
    data_out_user_V_1_data_out <= ap_const_lv1_0;
    data_out_user_V_1_sel <= data_out_user_V_1_sel_rd;

    data_out_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_user_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_user_V_1_vld_out <= data_out_user_V_1_state(0);
    i_fu_149_p2 <= std_logic_vector(unsigned(ap_phi_mux_val_assign_phi_fu_108_p4) + unsigned(ap_const_lv32_1));
    lhs_V_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_V),34));
    r_V_1_fu_129_p2 <= std_logic_vector(unsigned(r_V_fu_123_p2) + unsigned(ap_const_lv34_3FFFFFFFF));
    r_V_fu_123_p2 <= std_logic_vector(unsigned(lhs_V_fu_119_p1) + unsigned(rhs_V_fu_115_p1));
        rhs_V_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(beats),34));

        tmp_1_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_val_assign_phi_fu_108_p4),34));

    tmp_3_fu_139_p2 <= "1" when (signed(tmp_1_cast_fu_135_p1) < signed(r_V_reg_160)) else "0";
    val_assign_1_fu_144_p2 <= "1" when (tmp_1_cast_fu_135_p1 = r_V_1_reg_165) else "0";
end behav;
